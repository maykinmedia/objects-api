openapi: 3.0.3
info:
  title: Objects API
  version: 2.4.3
  description: |
    An API to manage Objects.

    # Introduction

    An OBJECT is of a certain OBJECTTYPE (defined in the Objecttypes API). An
    OBJECT has a few core attributes that every OBJECT (technically a RECORD,
    see below) has, although these attributes can sometimes be empty. They are
    attributes like `geometry` and some administrative attributes. The data that
    describes the actual object is stored in the `data` attribute and follows
    the JSON schema as given by the OBJECTTYPE.

    ## Validation

    When an OBJECT is created or changed the `OBJECT.type` attribute refers to the
    matching OBJECTTYPE in the Objecttypes API. The RECORD always indicates which
    OBJECTTYPE-VERSION is used, shown in the `RECORD.typeVersion` attribute.

    Using these 2 attributes, the appropriate JSON schema is retrieved from the
    Objecttypes API and the OBJECT data is validated against this JSON schema.

    ## History

    Each OBJECT has 1 or more RECORDs. A RECORD contains the data of an OBJECT
    at a certain time. An OBJECT can have multiple RECORDS that describe the
    history of that OBJECT. Changes to an OBJECT actually create a new RECORD
    under the OBJECT and leaves the old RECORD as is.

    ### Material and formal history

    History can be seen from 2 perspectives: formal and material history. The
    formal history describes the history as it should be (stored in the
    `startAt` and `endAt` attributes). The material history describes the
    history as it was administratively processed (stored in the `registeredAt`
    attribute).

    The difference is that an object could be created or updated in the real
    world at a certain point in time but the administrative change (ie. save or
    update the object in the Objects API) can be done at a later time. The
    query parameters `?date=2021-01-01` (formal history) and
    `?registrationDate=2021-01-01` (material history) allow for querying the
    RECORDS as seen from both perspectives, and can yield different results.

    ### Corrections

    RECORDs cannot be deleted or changed once saved. If an error was made to
    a RECORD, the RECORD can be "corrected" by saving a new RECORD and indicate
    that it corrects a previous RECORD. This is done via the attribute
    `correctionFor`.

    ### Deletion

    Although OBJECTs can be deleted, it is sometimes better to set the
    `endDate` of an OBJECT. Deleting an OBJECT also deletes all RECORDs in
    accordance with privacy laws.

    # Authorizations

    The API uses API-tokens that grant certain permissions. The API-token is
    passed via a header, like this: `Authorization: Token <token>`

    # Notifications

    When OBJECTs are created, updated or deleted via the API, notifications of
    these operations are published to the configured Notifications API in the
    `objecten` channel.
  contact:
    url: https://github.com/maykinmedia/objects-api
  license:
    name: EUPL-1.2
paths:
  /objects:
    get:
      operationId: object_list
      description: Retrieve a list of OBJECTs and their actual RECORD. The actual
        record is defined as if the query parameter `date=<today>` was given.
      parameters:
      - in: header
        name: Accept-Crs
        schema:
          type: string
          enum:
          - EPSG:4326
        description: 'The desired ''Coordinate Reference System'' (CRS) of the response
          data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is
          the same as WGS84).'
      - in: query
        name: data_attr
        schema:
          type: string
        description: |
          Only include objects that have attributes with certain values.

          A valid parameter value has the form `key__operator__value`.
          `key` is the attribute name, `operator` is the comparison operator to be used and `value` is the attribute value.
          Note: Values can be string, numeric, or dates (ISO format; YYYY-MM-DD).

          Valid operator values are:
          * `exact` - equal to
          * `gt` - greater than
          * `gte` - greater than or equal to
          * `lt` - lower than
          * `lte` - lower than or equal to
          * `icontains` - case-insensitive partial match
          * `in` - in a list of values separated by `|`

          `value` may not contain double underscore or comma characters.
          `key` may not contain comma characters and includes double underscore only if it indicates nested attributes.



          Example: in order to display only objects with `height` equal to 100, query `data_attr=height__exact__100`
          should be used. If `height` is nested inside `dimensions` attribute, query should look like
          `data_attr=dimensions__height__exact__100`

          This filter is very similar to the old `data_attrs` filter, but it has two differences:

          * `value` may contain commas
          * only one filtering expression is allowed

          If you want to use several filtering expressions, just use this `data_attr` several times in the query string.
          Example: `data_attr=height__exact__100&data_attr=naam__icontains__boom`
        explode: true
      - in: query
        name: data_attrs
        schema:
          type: string
        description: |
          **DEPRECATED: Use 'data_attr' instead**.
          Only include objects that have attributes with certain values.
          Data filtering expressions are comma-separated and are structured as follows:

          A valid parameter value has the form `key__operator__value`.
          `key` is the attribute name, `operator` is the comparison operator to be used and `value` is the attribute value.
          Note: Values can be string, numeric, or dates (ISO format; YYYY-MM-DD).

          Valid operator values are:
          * `exact` - equal to
          * `gt` - greater than
          * `gte` - greater than or equal to
          * `lt` - lower than
          * `lte` - lower than or equal to
          * `icontains` - case-insensitive partial match
          * `in` - in a list of values separated by `|`

          `value` may not contain double underscore or comma characters.
          `key` may not contain comma characters and includes double underscore only if it indicates nested attributes.



          Example: in order to display only objects with `height` equal to 100, query `data_attrs=height__exact__100`
          should be used. If `height` is nested inside `dimensions` attribute, query should look like
          `data_attrs=dimensions__height__exact__100`

          `value` may not contain comma, since commas are used as separator between filtering expressions.
          If you want to use commas in `value` you can use `data_attr` query parameter.
        deprecated: true
      - in: query
        name: data_icontains
        schema:
          type: string
        description: Search in all `data` values of string properties.
      - in: query
        name: date
        schema:
          type: string
          format: date
        description: Display record data for the specified material date, i.e. the
          specified date would be between `startAt` and `endAt` attributes. The default
          value is today
      - in: query
        name: fields
        schema:
          type: string
        description: 'Comma-separated fields, which should be displayed in the response.
          For example: ''url, uuid, record__geometry''.'
      - name: ordering
        required: false
        in: query
        description: 'Comma-separated fields, which are used to order results. For
          descending order use ''-'' as prefix. Nested fields are also supported.
          For example: ''-record__data__length,record__index''.'
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: registrationDate
        schema:
          type: string
          format: date
        description: Display record data for the specified registration date, i.e.
          the specified date would be between `registrationAt` attributes of different
          records
      - in: query
        name: type
        schema:
          type: string
          format: uri
          maxLength: 1000
          minLength: 1
        description: Url reference to OBJECTTYPE in Objecttypes API
      - in: query
        name: typeVersion
        schema:
          type: integer
        description: Display record data for the specified type version
      tags:
      - objects
      security:
      - tokenAuth: []
      responses:
        '200':
          headers:
            Content-Crs:
              schema:
                type: string
                enum:
                - EPSG:4326
              description: 'The ''Coordinate Reference System'' (CRS) of the request
                data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326
                is the same as WGS84).'
            X-Unauthorized-Fields:
              schema:
                type: string
              description: 'List of fields that are not allowed to display if the
                field-based authorization is turned on. The value has the following
                format: `objectType1:fieldA,fieldB; objectType2:fieldC,fieldD`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedObjectList'
          description: OK
    post:
      operationId: object_create
      description: Create an OBJECT and its initial RECORD.
      parameters:
      - in: header
        name: Accept-Crs
        schema:
          type: string
          enum:
          - EPSG:4326
        description: 'The desired ''Coordinate Reference System'' (CRS) of the response
          data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is
          the same as WGS84).'
      - in: header
        name: Content-Crs
        schema:
          type: string
          enum:
          - EPSG:4326
        description: 'The ''Coordinate Reference System'' (CRS) of the request data.
          According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is the same
          as WGS84).'
        required: true
      - in: header
        name: Content-Type
        schema:
          type: string
          enum:
          - application/json
        description: Content type of the request body.
        required: true
      tags:
      - objects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          headers:
            Content-Crs:
              schema:
                type: string
                enum:
                - EPSG:4326
              description: 'The ''Coordinate Reference System'' (CRS) of the request
                data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326
                is the same as WGS84).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
          description: Created
  /objects/{uuid}:
    get:
      operationId: object_read
      description: Retrieve a single OBJECT and its actual RECORD. The actual record
        is defined as if the query parameter `date=<today>` was given.
      parameters:
      - in: header
        name: Accept-Crs
        schema:
          type: string
          enum:
          - EPSG:4326
        description: 'The desired ''Coordinate Reference System'' (CRS) of the response
          data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is
          the same as WGS84).'
      - in: query
        name: fields
        schema:
          type: string
        description: 'Comma-separated fields, which should be displayed in the response.
          For example: ''url, uuid, record__geometry''.'
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
          description: Unique identifier (UUID4)
        required: true
      tags:
      - objects
      security:
      - tokenAuth: []
      responses:
        '200':
          headers:
            Content-Crs:
              schema:
                type: string
                enum:
                - EPSG:4326
              description: 'The ''Coordinate Reference System'' (CRS) of the request
                data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326
                is the same as WGS84).'
            X-Unauthorized-Fields:
              schema:
                type: string
              description: 'List of fields that are not allowed to display if the
                field-based authorization is turned on. The value has the following
                format: `objectType1:fieldA,fieldB; objectType2:fieldC,fieldD`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
    put:
      operationId: object_update
      description: Update the OBJECT by creating a new RECORD with the updates values.
      parameters:
      - in: header
        name: Accept-Crs
        schema:
          type: string
          enum:
          - EPSG:4326
        description: 'The desired ''Coordinate Reference System'' (CRS) of the response
          data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is
          the same as WGS84).'
      - in: header
        name: Content-Crs
        schema:
          type: string
          enum:
          - EPSG:4326
        description: 'The ''Coordinate Reference System'' (CRS) of the request data.
          According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is the same
          as WGS84).'
        required: true
      - in: header
        name: Content-Type
        schema:
          type: string
          enum:
          - application/json
        description: Content type of the request body.
        required: true
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
          description: Unique identifier (UUID4)
        required: true
      tags:
      - objects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Object'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          headers:
            Content-Crs:
              schema:
                type: string
                enum:
                - EPSG:4326
              description: 'The ''Coordinate Reference System'' (CRS) of the request
                data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326
                is the same as WGS84).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
    patch:
      operationId: object_partial_update
      description: Update the OBJECT by creating a new RECORD with the updates values.
        The provided `record.data` value will be merged recursively with the existing
        record data.
      parameters:
      - in: header
        name: Accept-Crs
        schema:
          type: string
          enum:
          - EPSG:4326
        description: 'The desired ''Coordinate Reference System'' (CRS) of the response
          data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is
          the same as WGS84).'
      - in: header
        name: Content-Crs
        schema:
          type: string
          enum:
          - EPSG:4326
        description: 'The ''Coordinate Reference System'' (CRS) of the request data.
          According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is the same
          as WGS84).'
        required: true
      - in: header
        name: Content-Type
        schema:
          type: string
          enum:
          - application/json
        description: Content type of the request body.
        required: true
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
          description: Unique identifier (UUID4)
        required: true
      tags:
      - objects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedObject'
      security:
      - tokenAuth: []
      responses:
        '200':
          headers:
            Content-Crs:
              schema:
                type: string
                enum:
                - EPSG:4326
              description: 'The ''Coordinate Reference System'' (CRS) of the request
                data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326
                is the same as WGS84).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
          description: OK
    delete:
      operationId: object_delete
      description: Delete an OBJECT and all RECORDs belonging to it.
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
          description: Unique identifier (UUID4)
        required: true
      tags:
      - objects
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /objects/{uuid}/{index}:
    get:
      operationId: object_history_detail
      description: Retrieve the specified OBJECT given an UUID and INDEX.
      parameters:
      - in: header
        name: Accept-Crs
        schema:
          type: string
          enum:
          - EPSG:4326
        description: 'The desired ''Coordinate Reference System'' (CRS) of the response
          data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is
          the same as WGS84).'
      - in: path
        name: index
        schema:
          type: number
        required: true
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - objects
      security:
      - tokenAuth: []
      responses:
        '200':
          headers:
            Content-Crs:
              schema:
                type: string
                enum:
                - EPSG:4326
              description: 'The ''Coordinate Reference System'' (CRS) of the request
                data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326
                is the same as WGS84).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryRecord'
          description: OK
  /objects/{uuid}/history:
    get:
      operationId: object_history
      description: Retrieve all RECORDs of an OBJECT.
      parameters:
      - in: header
        name: Accept-Crs
        schema:
          type: string
          enum:
          - EPSG:4326
        description: 'The desired ''Coordinate Reference System'' (CRS) of the response
          data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is
          the same as WGS84).'
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
          description: Unique identifier (UUID4)
        required: true
      tags:
      - objects
      security:
      - tokenAuth: []
      responses:
        '200':
          headers:
            Content-Crs:
              schema:
                type: string
                enum:
                - EPSG:4326
              description: 'The ''Coordinate Reference System'' (CRS) of the request
                data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326
                is the same as WGS84).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedHistoryRecordList'
          description: OK
  /objects/search:
    post:
      operationId: object_search
      description: Perform a (geo) search on OBJECTs.
      parameters:
      - in: header
        name: Accept-Crs
        schema:
          type: string
          enum:
          - EPSG:4326
        description: 'The desired ''Coordinate Reference System'' (CRS) of the response
          data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is
          the same as WGS84).'
      - in: header
        name: Content-Crs
        schema:
          type: string
          enum:
          - EPSG:4326
        description: 'The ''Coordinate Reference System'' (CRS) of the request data.
          According to the GeoJSON spec, WGS84 is the default (EPSG: 4326 is the same
          as WGS84).'
        required: true
      - in: header
        name: Content-Type
        schema:
          type: string
          enum:
          - application/json
        description: Content type of the request body.
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - objects
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
              - $ref: '#/components/schemas/ObjectSearch'
              - type: object
                properties:
                  type:
                    type: string
                    format: uri
                    maxLength: 1000
                    minLength: 1
                    description: Url reference to OBJECTTYPE in Objecttypes API
                  data_attrs:
                    type: string
                    description: |
                      **DEPRECATED: Use 'data_attr' instead**.
                      Only include objects that have attributes with certain values.
                      Data filtering expressions are comma-separated and are structured as follows:

                      A valid parameter value has the form `key__operator__value`.
                      `key` is the attribute name, `operator` is the comparison operator to be used and `value` is the attribute value.
                      Note: Values can be string, numeric, or dates (ISO format; YYYY-MM-DD).

                      Valid operator values are:
                      * `exact` - equal to
                      * `gt` - greater than
                      * `gte` - greater than or equal to
                      * `lt` - lower than
                      * `lte` - lower than or equal to
                      * `icontains` - case-insensitive partial match
                      * `in` - in a list of values separated by `|`

                      `value` may not contain double underscore or comma characters.
                      `key` may not contain comma characters and includes double underscore only if it indicates nested attributes.



                      Example: in order to display only objects with `height` equal to 100, query `data_attrs=height__exact__100`
                      should be used. If `height` is nested inside `dimensions` attribute, query should look like
                      `data_attrs=dimensions__height__exact__100`

                      `value` may not contain comma, since commas are used as separator between filtering expressions.
                      If you want to use commas in `value` you can use `data_attr` query parameter.
                  data_attr:
                    type: string
                    description: |
                      Only include objects that have attributes with certain values.

                      A valid parameter value has the form `key__operator__value`.
                      `key` is the attribute name, `operator` is the comparison operator to be used and `value` is the attribute value.
                      Note: Values can be string, numeric, or dates (ISO format; YYYY-MM-DD).

                      Valid operator values are:
                      * `exact` - equal to
                      * `gt` - greater than
                      * `gte` - greater than or equal to
                      * `lt` - lower than
                      * `lte` - lower than or equal to
                      * `icontains` - case-insensitive partial match
                      * `in` - in a list of values separated by `|`

                      `value` may not contain double underscore or comma characters.
                      `key` may not contain comma characters and includes double underscore only if it indicates nested attributes.



                      Example: in order to display only objects with `height` equal to 100, query `data_attr=height__exact__100`
                      should be used. If `height` is nested inside `dimensions` attribute, query should look like
                      `data_attr=dimensions__height__exact__100`

                      This filter is very similar to the old `data_attrs` filter, but it has two differences:

                      * `value` may contain commas
                      * only one filtering expression is allowed

                      If you want to use several filtering expressions, just use this `data_attr` several times in the query string.
                      Example: `data_attr=height__exact__100&data_attr=naam__icontains__boom`
                  date:
                    type: string
                    format: date
                    description: Display record data for the specified material date,
                      i.e. the specified date would be between `startAt` and `endAt`
                      attributes. The default value is today
                  registrationDate:
                    type: string
                    format: date
                    description: Display record data for the specified registration
                      date, i.e. the specified date would be between `registrationAt`
                      attributes of different records
                  typeVersion:
                    type: integer
                    description: Display record data for the specified type version
                  data_icontains:
                    type: string
                    description: Search in all `data` values of string properties.
                  ordering:
                    type: string
                    description: 'Comma-separated fields, which are used to order
                      results. For descending order use ''-'' as prefix. Nested fields
                      are also supported. For example: ''-record__data__length,record__index''.'
      security:
      - tokenAuth: []
      responses:
        '200':
          headers:
            Content-Crs:
              schema:
                type: string
                enum:
                - EPSG:4326
              description: 'The ''Coordinate Reference System'' (CRS) of the request
                data. According to the GeoJSON spec, WGS84 is the default (EPSG: 4326
                is the same as WGS84).'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedObjectList'
          description: OK
  /permissions:
    get:
      operationId: permission_list
      description: Retrieve a list of permissions available for the user
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - permissions
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPermissionList'
          description: OK
components:
  schemas:
    GeoJSONGeometry:
      oneOf:
      - $ref: '#/components/schemas/Point'
      - $ref: '#/components/schemas/MultiPoint'
      - $ref: '#/components/schemas/LineString'
      - $ref: '#/components/schemas/MultiLineString'
      - $ref: '#/components/schemas/Polygon'
      - $ref: '#/components/schemas/MultiPolygon'
      - $ref: '#/components/schemas/GeometryCollection'
      discriminator:
        propertyName: type
        mapping:
          Point: '#/components/schemas/Point'
          MultiPoint: '#/components/schemas/MultiPoint'
          LineString: '#/components/schemas/LineString'
          MultiLineString: '#/components/schemas/MultiLineString'
          Polygon: '#/components/schemas/Polygon'
          MultiPolygon: '#/components/schemas/MultiPolygon'
          GeometryCollection: '#/components/schemas/GeometryCollection'
    GeoWithin:
      type: object
      properties:
        within:
          $ref: '#/components/schemas/GeoJSONGeometry'
    Geometry:
      type: object
      title: Geometry
      description: GeoJSON geometry
      required:
      - type
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1
      properties:
        type:
          type: string
          description: The geometry type
    GeometryCollection:
      type: object
      description: GeoJSON geometry collection
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.8
      allOf:
      - $ref: '#/components/schemas/Geometry'
      - type: object
        required:
        - geometries
        properties:
          geometries:
            type: array
            items:
              $ref: '#/components/schemas/Geometry'
    HistoryRecord:
      type: object
      properties:
        index:
          type: integer
          readOnly: true
          description: Incremental index number of the object record.
        typeVersion:
          type: integer
          maximum: 32767
          minimum: 0
          description: Version of the OBJECTTYPE for data in the object record
        data:
          description: Object data, based on OBJECTTYPE
        geometry:
          allOf:
          - $ref: '#/components/schemas/GeoJSONGeometry'
          nullable: true
          description: Point, linestring or polygon object which represents the coordinates
            of the object. Geometry can be added only if the related OBJECTTYPE allows
            this (`OBJECTTYPE.allowGeometry = true` or `OBJECTTYPE.allowGeometry`
            doesn't exist)
        startAt:
          type: string
          format: date
          description: Legal start date of the object record
        endAt:
          type: string
          format: date
          readOnly: true
          nullable: true
          description: Legal end date of the object record
        registrationAt:
          type: string
          format: date
          readOnly: true
          description: The date when the record was registered in the system
        correctionFor:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Index of the record corrected by the current record
          readOnly: true
        correctedBy:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Index of the record, which corrects the current record
          readOnly: true
      required:
      - startAt
      - typeVersion
    LineString:
      type: object
      description: GeoJSON line-string geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.4
      allOf:
      - $ref: '#/components/schemas/Geometry'
      - type: object
        required:
        - coordinates
        properties:
          coordinates:
            type: array
            items:
              $ref: '#/components/schemas/Point2D'
            minItems: 2
    ModeEnum:
      enum:
      - read_only
      - read_and_write
      type: string
      description: |-
        * `read_only` - Read-only
        * `read_and_write` - Read and write
    MultiLineString:
      type: object
      description: GeoJSON multi-line-string geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.5
      allOf:
      - $ref: '#/components/schemas/Geometry'
      - type: object
        required:
        - coordinates
        properties:
          coordinates:
            type: array
            items:
              type: array
              items:
                $ref: '#/components/schemas/Point2D'
    MultiPoint:
      type: object
      description: GeoJSON multi-point geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.3
      allOf:
      - $ref: '#/components/schemas/Geometry'
      - type: object
        required:
        - coordinates
        properties:
          coordinates:
            type: array
            items:
              $ref: '#/components/schemas/Point2D'
    MultiPolygon:
      type: object
      description: GeoJSON multi-polygon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.7
      allOf:
      - $ref: '#/components/schemas/Geometry'
      - type: object
        required:
        - coordinates
        properties:
          coordinates:
            type: array
            items:
              type: array
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Point2D'
    Object:
      type: object
      description: |-
        this mixin allows selecting fields for serializer in the query param
        It also supports nested fields.
      properties:
        url:
          type: string
          format: uri
          minLength: 1
          maxLength: 1000
          description: URL reference to this object. This is the unique identification
            and location of this object.
          readOnly: true
        uuid:
          type: string
          format: uuid
          description: Unique identifier (UUID4)
        type:
          type: string
          format: uri
          minLength: 1
          maxLength: 1000
          description: Url reference to OBJECTTYPE in Objecttypes API
        record:
          allOf:
          - $ref: '#/components/schemas/ObjectRecord'
          description: State of the OBJECT at a certain time
      required:
      - record
      - type
    ObjectRecord:
      type: object
      properties:
        index:
          type: integer
          readOnly: true
          description: Incremental index number of the object record.
        typeVersion:
          type: integer
          maximum: 32767
          minimum: 0
          description: Version of the OBJECTTYPE for data in the object record
        data:
          description: Object data, based on OBJECTTYPE
        geometry:
          allOf:
          - $ref: '#/components/schemas/GeoJSONGeometry'
          nullable: true
          description: Point, linestring or polygon object which represents the coordinates
            of the object. Geometry can be added only if the related OBJECTTYPE allows
            this (`OBJECTTYPE.allowGeometry = true` or `OBJECTTYPE.allowGeometry`
            doesn't exist)
        startAt:
          type: string
          format: date
          description: Legal start date of the object record
        endAt:
          type: string
          format: date
          readOnly: true
          nullable: true
          description: Legal end date of the object record
        registrationAt:
          type: string
          format: date
          readOnly: true
          description: The date when the record was registered in the system
        correctionFor:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Index of the record corrected by the current record
          nullable: true
        correctedBy:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Index of the record, which corrects the current record
          readOnly: true
      required:
      - startAt
      - typeVersion
    ObjectSearch:
      type: object
      properties:
        geometry:
          $ref: '#/components/schemas/GeoWithin'
    PaginatedHistoryRecordList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/HistoryRecord'
    PaginatedObjectList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Object'
    PaginatedPermissionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
    PatchedObject:
      type: object
      description: |-
        this mixin allows selecting fields for serializer in the query param
        It also supports nested fields.
      properties:
        url:
          type: string
          format: uri
          minLength: 1
          maxLength: 1000
          description: URL reference to this object. This is the unique identification
            and location of this object.
          readOnly: true
        uuid:
          type: string
          format: uuid
          description: Unique identifier (UUID4)
        type:
          type: string
          format: uri
          minLength: 1
          maxLength: 1000
          description: Url reference to OBJECTTYPE in Objecttypes API
        record:
          allOf:
          - $ref: '#/components/schemas/ObjectRecord'
          description: State of the OBJECT at a certain time
    Permission:
      type: object
      properties:
        type:
          type: string
          format: uri
          minLength: 1
          maxLength: 1000
          description: Url reference to OBJECTTYPE in Objecttypes API
        mode:
          allOf:
          - $ref: '#/components/schemas/ModeEnum'
          description: |-
            Permission mode

            * `read_only` - Read-only
            * `read_and_write` - Read and write
        use_fields:
          type: boolean
          description: Use field-based authorization
        fields:
          nullable: true
          title: Mode
          description: Fields allowed for this token in relation to objecttype versions.
            Supports only first level of the `record.data` properties
      required:
      - mode
      - type
    Point:
      type: object
      description: GeoJSON point geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.2
      allOf:
      - $ref: '#/components/schemas/Geometry'
      - type: object
        required:
        - coordinates
        properties:
          coordinates:
            $ref: '#/components/schemas/Point2D'
    Point2D:
      type: array
      title: Point2D
      description: A 2D point
      items:
        type: number
      maxItems: 2
      minItems: 2
    Polygon:
      type: object
      description: GeoJSON polygon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.6
      allOf:
      - $ref: '#/components/schemas/Geometry'
      - type: object
        required:
        - coordinates
        properties:
          coordinates:
            type: array
            items:
              type: array
              items:
                $ref: '#/components/schemas/Point2D'
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
servers:
- url: /api/v2
tags:
- name: objects
- name: permissions
externalDocs:
  url: https://objects-and-objecttypes-api.readthedocs.io/

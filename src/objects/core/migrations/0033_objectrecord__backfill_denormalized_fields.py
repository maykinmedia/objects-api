# Generated by Django 5.2.3 on 2025-09-29 08:19

import os

from django.db import connection, migrations

from structlog import get_logger

logger = get_logger(__name__)


BATCH_SIZE = int(os.getenv("OBJECTRECORD_BATCH_SIZE", 200_000))


def backfill_object_type_batch(apps, cursor, batch_size):
    cursor.execute(
        """
        WITH batch AS (
            SELECT r.id
            FROM core_objectrecord r
            WHERE r._object_type_id IS NULL
            LIMIT %s
        )
        UPDATE core_objectrecord r
        SET _object_type_id = o.object_type_id
        FROM core_object o, batch
        WHERE r.id = batch.id
          AND r.object_id = o.id;
    """,
        [batch_size],
    )
    return cursor.rowcount


def forward(apps, schema_editor):
    with connection.cursor() as cursor:
        while True:
            num_updated = backfill_object_type_batch(apps, cursor, BATCH_SIZE)
            if num_updated == 0:
                break

            logger.info("backfilled_object_type_for_records", num_records=num_updated)


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0032_objectrecord__object_type"),
    ]

    operations = [migrations.RunPython(forward, migrations.RunPython.noop)]

services:
  redis:
    image: redis:7
    command: [ "redis-server", "--appendonly", "yes" ]

# Objects API
  objects-db:
    # NOTE: No persistance storage configured.
    # See: https://hub.docker.com/_/postgres/
    image: postgis/postgis:12-2.5
    environment:
      - POSTGRES_USER=${DB_USER:-objects}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-objects}
    volumes:
      - objects-db:/var/lib/postgresql/data

  objects.local:
    image: maykinmedia/objects-api:latest
    build: &objects-build
      context: .
    environment: &objects-env
      - DJANGO_SETTINGS_MODULE=objects.conf.docker
      - SECRET_KEY=${SECRET_KEY:-1(@f(-6s_u(5fd&1sg^uvu2s(c-9sapw)1era8q&)g)h@cwxxg}
      - DB_HOST=objects-db
      - IS_HTTPS=no
      - ALLOWED_HOSTS=*
      - CACHE_DEFAULT=redis:6379/0
      - CACHE_AXES=redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - CELERY_LOGLEVEL=DEBUG
      - DISABLE_2FA=yes
      - OBJECTS_SUPERUSER_USERNAME=admin
      - OBJECTS_SUPERUSER_EMAIL=admin@localhost
      - DJANGO_SUPERUSER_PASSWORD=admin
      # setup_configuration env vars
      - OBJECTS_DOMAIN=objects.local:8000
      - OBJECTS_ORGANIZATION=Objects
      - OBJECTTYPES_API_ROOT=https://objecttypes.local/api/v2/
      - OBJECTS_OBJECTTYPES_TOKEN=some-random-string
      - DEMO_CONFIG_ENABLE=yes
      - DEMO_TOKEN=demo-random-string
      - DEMO_PERSON=Demo
      - DEMO_EMAIL=demo@demo.local
    healthcheck:
      test: [ "CMD", "python", "-c", "import requests; exit(requests.head('http://localhost:8000/admin/').status_code not in [200, 302])" ]
      interval: 30s
      timeout: 5s
      retries: 3
      # This should allow for enough time for migrations to run before the max
      # retries have passed. This healthcheck in turn allows other containers
      # to wait for the database migrations.
      start_period: 30s
    ports:
      - 8000:8000
    depends_on:
      objects-init:
        condition: service_completed_successfully
    volumes: &objects-volumes
      - objects-media:/app/media  # Shared media volume to get access to saved OAS files

  objects-init:
    image: maykinmedia/objects-api:latest
    build: *objects-build
    environment: *objects-env
    command: /setup_configuration.sh
    depends_on:
      - objects-db
      - redis
    volumes: *objects-volumes

  objects-celery:
    image: maykinmedia/objects-api:latest
    build: *objects-build
    environment: *objects-env
    command: /celery_worker.sh
    healthcheck:
      test: [ "CMD", "python", "/app/bin/check_celery_worker_liveness.py" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      objects.local:
        condition: service_healthy
    volumes: *objects-volumes

# Objecttypes API
  objecttypes-db:
    image: postgres:12-alpine
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=objecttypes
      - POSTGRES_PASSWORD=objecttypes
    volumes:
      - objecttypes-db:/var/lib/postgresql/data
    command: postgres -c max_connections=300 -c log_min_messages=LOG

  objecttypes.local:
#    build: ../objecttypes
    image: maykinmedia/objecttypes-api:latest
    environment: &objecttypes-env
      - DJANGO_SETTINGS_MODULE=objecttypes.conf.docker
      - SECRET_KEY=${SECRET_KEY:-fgv=c0hz&tl*8*3m3893@m+1pstrvidc9e^5@fpspmg%cy$15d}
      - DB_HOST=objecttypes-db
      - DB_USER=objecttypes
      - DB_PASSWORD=objecttypes
      - DB_NAME=objecttypes
      - IS_HTTPS=no
      - ALLOWED_HOSTS=*
      - DISABLE_2FA=yes
      - CACHE_DEFAULT=redis:6379/0
      - CACHE_AXES=redis:6379/0
      - OBJECTTYPE_SUPERUSER_USERNAME=admin
      - OBJECTTYPE_SUPERUSER_EMAIL=admin@localhost
      - OBJECTTYPE_SUPERUSER_PASSWORD=admin
      # setup_configuration env vars
      - OBJECTTYPES_DOMAIN=objecttypes:8000
      - OBJECTTYPES_ORGANIZATION=ObjectTypes
      - OBJECTS_OBJECTTYPES_TOKEN=objects-random-string
      - OBJECTS_OBJECTTYPES_PERSON=Objects
      - OBJECTS_OBJECTTYPES_EMAIL=objects@objects.local
      - DEMO_CONFIG_ENABLE=yes
      - DEMO_TOKEN=demo-random-string
      - DEMO_PERSON=Demo
      - DEMO_EMAIL=demo@demo.local
    ports:
      - 8001:8000
    depends_on:
      objecttypes-init:
        condition: service_completed_successfully

  objecttypes-init:
#    build: ../objecttypes
    image: maykinmedia/objecttypes-api:latest
    environment: *objecttypes-env
    command: /setup_configuration.sh
    depends_on:
      - objecttypes-db

#  Open Notificaties
  on-db:
    image: postgres:12-alpine
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=nrc
      - POSTGRES_PASSWORD=nrc
    volumes:
      - on-db:/var/lib/postgresql/data
    command: postgres -c max_connections=300 -c log_min_messages=LOG

  on-rabbitmq:
    image: rabbitmq:3.9-alpine

  on.local:
    image: openzaak/open-notificaties:latest
    environment: &on-env
      - DJANGO_SETTINGS_MODULE=nrc.conf.docker
      - SECRET_KEY=${SECRET_KEY:-\(,gc7VE(#CO<zCR3e(lRtOsw5q+U2DpG5o\X#P4PVRm*=u|E%}
      - DB_HOST=on-db
      - DB_USER=nrc
      - DB_PASSWORD=nrc
      - DB_NAME=nrc
      - IS_HTTPS=no
      - ALLOWED_HOSTS=*
      - CACHE_DEFAULT=redis:6379/0
      - CACHE_AXES=redis:6379/1
      - RABBITMQ_HOST=on-rabbitmq
      - PUBLISH_BROKER_URL=amqp://guest:guest@rabbitmq:5672/%2F
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - CELERY_LOGLEVEL=DEBUG
      - CELERY_WORKER_CONCURRENCY=${CELERY_WORKER_CONCURRENCY:-4}
      - OPENNOTIFICATIES_SUPERUSER_USERNAME=admin
      - OPENNOTIFICATIES_SUPERUSER_EMAIL=admin@localhost
      - DJANGO_SUPERUSER_PASSWORD=admin
      - DISABLE_2FA=yes
      # setup_configuration env vars
      - OPENNOTIFICATIES_DOMAIN=on.local:8000
      - OPENNOTIFICATIES_ORGANIZATION=ON
      - AUTORISATIES_API_ROOT=https://oz.local/autorisaties/api/v1/
      - NOTIF_OPENZAAK_CLIENT_ID=notif-client-id
      - NOTIF_OPENZAAK_SECRET=notif-secret
      - OPENZAAK_NOTIF_CLIENT_ID=oz-client-id
      - OPENZAAK_NOTIF_SECRET=oz-secret
    ports:
      - 8005:8000
    depends_on:
      on-init:
        condition: service_completed_successfully

  on-init:
    image: openzaak/open-notificaties:latest
    environment: *on-env
    command: /setup_configuration.sh
    depends_on:
      - on-db
      - on-rabbitmq
      - redis

  on-celery:
    image: openzaak/open-notificaties:latest
    environment: *on-env
    command: /celery_worker.sh
    depends_on:
      - on-db
      - on-rabbitmq
      - redis

  on-celery-beat:
    image: openzaak/open-notificaties:latest
    environment: *on-env
    command: /celery_beat.sh
    depends_on:
      - on-db
      - on-rabbitmq
      - redis

#  on-nginx:
#    image: nginx
#    volumes:
#      - ./docker-nginx-default.conf:/etc/nginx/conf.d/default.conf
#    ports:
#      - "9000:80"
#    depends_on:
#      - web

# Open Zaak
  oz-db:
    image: postgis/postgis:12-2.5
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=openzaak
      - POSTGRES_PASSWORD=openzaak
    command: postgres -c max_connections=300 -c log_min_messages=LOG
    volumes:
      - oz-db:/var/lib/postgresql/data
    ports:
      - "11234:5432"

  oz.local:
    image: openzaak/open-zaak:latest
    environment: &oz-env
      - DJANGO_SETTINGS_MODULE=openzaak.conf.docker
      - SECRET_KEY=${SECRET_KEY:-7(h1r2hk)8z9+05edulo_3qzymwbo&c24=)qz7+_@3&2sp=u%i}
      - DB_NAME=openzaak
      - DB_USER=openzaak
      - DB_HOST=oz-db
      - IS_HTTPS=no
      - ALLOWED_HOSTS=localhost,127.0.0.1,oz,oz.local
      - CORS_ALLOW_ALL_ORIGINS=True
#      - CSRF_TRUSTED_ORIGINS=http://localhost:9000
      - CACHE_DEFAULT=redis:6379/0
      - CACHE_AXES=redis:6379/0
      - OPENZAAK_SUPERUSER_USERNAME=admin
      - DJANGO_SUPERUSER_PASSWORD=admin
      - OPENZAAK_SUPERUSER_EMAIL=admin@localhost
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - CELERY_LOGLEVEL=DEBUG
      - CELERY_WORKER_CONCURRENCY=${CELERY_WORKER_CONCURRENCY:-4}
      - LOG_REQUESTS=yes
      - LOG_OUTGOING_REQUESTS_DB_SAVE=yes
      - DISABLE_2FA=yes
      # setup_configuration env vars
      - OPENZAAK_DOMAIN=oz.local:8000
      - OPENZAAK_ORGANIZATION=OZ
      - NOTIF_OPENZAAK_CLIENT_ID=notif-client-id
      - NOTIF_OPENZAAK_SECRET=notif-secret
      - NOTIF_API_ROOT=http://on.local:8000/api/v1/
      - OPENZAAK_NOTIF_CLIENT_ID=oz-client-id
      - OPENZAAK_NOTIF_SECRET=oz-secret
      - DEMO_CONFIG_ENABLE=yes
      - DEMO_CLIENT_ID=demo-client-id
      - DEMO_SECRET=demo-secret
    ports:
      - 8010:8000
    volumes: &oz-volumes
      - oz-media:/app/media  # Shared media volume to get access to saved OAS files
      - oz-private-media:/app/private-media
    depends_on:
      oz-init:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "python", "-c", "import requests; exit(requests.head('http://localhost:8000/admin/').status_code not in [200, 302])" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  oz-init:
    image: openzaak/open-zaak:latest
    environment: *oz-env
    command: /setup_configuration.sh
    volumes: *oz-volumes
    depends_on:
      - oz-db
      - redis

  oz-celery:
    image: openzaak/open-zaak:latest
    environment: *oz-env
    command: /celery_worker.sh
    volumes: *oz-volumes
    depends_on:
      - oz-db
      - redis

#  oz-nginx:
#    image: nginx
#    volumes:
#      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
#      - oz-private-media:/private-media
#    ports:
#      - "9000:80"
#    depends_on:
#      - oz.local

# Consumer for notifications

  mock-consumer:
    image: nginx:1.19
    volumes:
      - ./docker/mocks.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 9010:80

volumes:
  on-db:
  objects-db:
  objects-media:
  objecttypes-db:
  oz-db:
  oz-media:
  oz-private-media:


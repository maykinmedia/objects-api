name: bin-check.yml
on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

jobs:
  dump_data:
    name: Test dump_data.sh
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:16-3.5
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Set up backend environment
        uses: maykinmedia/setup-django-backend@v1.3
        with:
          apt-packages: "libgdal-dev gdal-bin postgresql-client"
          python-version: "3.12"
          optimize-postgres: "no"
          setup-node: "no"

      - name: Run setup db & dump data
        run: |
          createdb -h localhost -U postgres objects
          python src/manage.py migrate
          src/manage.py loaddata demodata
          SCRIPTPATH=bin DUMP_FILE=dump.sql bin/dump_data.sh --combined
          SCRIPTPATH=bin TAR_FILE=dump.tar bin/dump_data.sh --csv
        env:
          DB_PASSWORD: ""
          DB_USER: postgres
          DB_NAME: objects
          DB_HOST: localhost
          SECRET_KEY: secret
          DJANGO_SETTINGS_MODULE: objects.conf.ci
          ALLOWED_HOSTS: localhost,127.0.0.1

      - name: validate dump
        run: |
          grep "COPY public.core_object" dump.sql
          ! grep "COPY public.auth_group" dump.sql
      - name: load into other db
        run: |
          createdb -h localhost -U postgres test
          psql -v ON_ERROR_STOP=1 -h localhost -U postgres -d test -f dump.sql

      - name: validate csv dump
        run: |
          tar -xf dump.tar
          test -f core_object.csv || exit 1
          ! test -f auth_group.csv || exit 1
          grep "id,uuid,object_type_id,created_on,modified_on" core_object.csv



services:
  db:
    # NOTE: No persistance storage configured.
    # See: https://hub.docker.com/_/postgres/
    image: postgis/postgis:17-3.5
    environment:
      - POSTGRES_USER=${DB_USER:-objects}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-objects}
    networks:
      - objects-dev

  redis:
    image: redis:7
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - objects-dev

  web:
    image: maykinmedia/objects-api:latest
    build: &web_build
      context: .
    environment: &web_env
      DJANGO_SETTINGS_MODULE: objects.conf.docker
      SECRET_KEY: ${SECRET_KEY:-1(@f(-6s_u(5fd&1sg^uvu2s(c-9sapw)1era8q&)g)h@cwxxg}
      IS_HTTPS: no
      ALLOWED_HOSTS: '*'
      CACHE_DEFAULT: redis:6379/0
      CACHE_AXES: redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      CELERY_LOGLEVEL: DEBUG
      DISABLE_2FA: ${DISABLE_2FA:-yes}
      SUBPATH: ${SUBPATH}
      DB_POOL_ENABLED: True
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; exit(requests.head('http://localhost:8000/admin/').status_code not in [200, 302])"]
      interval: 30s
      timeout: 5s
      retries: 3
      # This should allow for enough time for migrations to run before the max
      # retries have passed. This healthcheck in turn allows other containers
      # to wait for the database migrations.
      start_period: 30s
    ports:
      - 8000:8000
    depends_on:
        web-init:
          condition: service_completed_successfully
    volumes: &web_volumes
      - media:/app/media  # Shared media volume to get access to saved OAS files
    networks:
      - objects-dev
    labels:
      client: dev
      target: test
      app: objects-api
      service: web

  web-init:
    image: maykinmedia/objects-api:latest
    build: *web_build
    environment:
      <<: *web_env
      #
      # Django-setup-configuration
      RUN_SETUP_CONFIG: ${RUN_SETUP_CONFIG:-true}
    command: /setup_configuration.sh
    depends_on:
      - db
      - redis
    volumes:
      - ./docker/setup_configuration:/app/setup_configuration
    networks:
      - objects-dev

  objecttypes-web:
    image: maykinmedia/objecttypes-api:latest
    environment: &app-env
      DB_USER: objects
      DB_PASSWORD: objects
      DJANGO_SETTINGS_MODULE: objecttypes.conf.docker
      SECRET_KEY: ${SECRET_KEY:-fgv=c0hz&tl*8*3m3893@m+1pstrvidc9e^5@fpspmg%cyf15d}
      ALLOWED_HOSTS: '*'
      CACHE_DEFAULT: redis:6379/0
      CACHE_AXES: redis:6379/0
      DISABLE_2FA: yes
      SUBPATH: ${SUBPATH:-/}
    volumes:
      - ./docker/objecttypes/objecttypes.json:/app/fixtures/objecttypes.json
    ports:
      - 8001:8000
    depends_on:
      objecttypes-web-init:
        condition: service_completed_successfully
    networks:
      - objects-dev

  objecttypes-web-init:
    image: maykinmedia/objecttypes-api:latest
    environment:
      <<: *app-env
      #
      # Django-setup-configuration
      RUN_SETUP_CONFIG: ${RUN_SETUP_CONFIG:-true}
    command: /setup_configuration.sh
    volumes:
      - ./docker/setup_configuration/objecttypes_data.yaml:/app/setup_configuration/data.yaml
    depends_on:
      - db
      - redis
    networks:
      - objects-dev

  celery:
    image: maykinmedia/objects-api:latest
    build: *web_build
    environment: *web_env
    command: /celery_worker.sh
    healthcheck:
      test: ["CMD", "python", "/app/bin/check_celery_worker_liveness.py"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      web:
        condition: service_healthy
    volumes: *web_volumes
    networks:
      - objects-dev

  celery-flower:
    image: maykinmedia/objects-api:latest
    build: *web_build
    environment: *web_env
    command: /celery_flower.sh
    ports:
      - 5555:5555
    depends_on:
      - redis
      - celery
    networks:
      - objects-dev

volumes:
  media:

networks:
  objects-dev:
    name: objects-dev
